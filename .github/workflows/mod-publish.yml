name: Publish release

on:
  workflow_call:
    inputs:
      submodules:
        description: 'Whether to checkout submodules'
        default: false
        required: false
        type: boolean
      java-version:
        description: 'Java version to compile with'
        default: 17
        required: false
        type: number
      gradle-build:
        description: 'Gradle build command'
        default: './gradlew build'
        required: false
        type: string
      gradle-publish:
        description: 'Gradle publish command'
        required: false
        type: string
      changelog:
        description: 'The changelog to publish'
        default: ${{ github.event.release.body }}
        required: false
        type: string
      artifacts:
        description: 'The location of the build artifacts'
        default: 'build/libs/*'
        required: false
        type: string
    secrets:
      MODRINTH:
        required: false
      CURSEFORGE:
        required: false

jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: ${{ inputs.submodules }}
      - uses: gradle/actions/wrapper-validation@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.java-version }}
      - name: Build and publish with Gradle
        run: ${{ inputs.gradle-build }} ${{ inputs.gradle-publish || format('{0} {1}', secrets.modrinth != null && 'modrinth' || '', secrets.curseforge != null && 'curseforge' || '') }} --continue --no-daemon
        env:
          BUILD_RELEASE: ${{github.event.prelease == false}}
          MODRINTH_TOKEN: ${{ secrets.MODRINTH }}
          CURSEFORGE_TOKEN: ${{ secrets.CURSEFORGE }}
          CHANGELOG: ${{ inputs.changelog }}
      - name: :3
        if: always()
        shell: bash
        env:
          paths: ${{ inputs.artifacts }}
        run: |
          _date() { date +%H:%M:%S; }
          _trace() { echo -e "[$(_date)] [\e[35mTRACE\e[0m]" "$@"; }
          _debug() { echo -e "[$(_date)] [\e[34mDEBUG\e[0m]" "$@"; }
          _info() { echo -e "[$(_date)] [\e[32mINFO\e[0m]" "$@"; }
          _warn() { echo -e "[$(_date)] [\e[33mWARN\e[0m]" "$@"; }
          _error() { echo -e "[$(_date)] [\e[31mERROR\e[0m]" "$@"; }
          trace() { _trace "$@"; "$@"; }

          _flwr_deny=()
          _flwr_allow=()
          trace mkdir -p /tmp/_flwr/pool

          { while read -r path; do _debug "$path"; if [[ "$path" == \!* ]]; then _flwr_deny+=("${path#*\!}"); else _flwr_allow+=("$path"); fi; done }<<<"$paths"

          _debug _flwr_deny -\> "${_flwr_deny[@]}"
          _debug _flwr_allow -\> "${_flwr_allow[@]}"

          for v in "${_flwr_allow[@]}"; do
            _info "Iterating over $v"
            for i in $v; do
              for c in "${_flwr_deny[@]}"; do
                if [[ "$i" == $c ]]; then
                  _trace "Skipping $i as it conforms to $c"
                  continue 2;
                fi
              done
              trace mv "$i" /tmp/_flwr/pool/
            done
          done
      - name: Upload build artifacts
        if: always()
        uses: AButler/upload-release-assets@v3.0
        with:
          files: /tmp/_flwr/pool/*
          repo-token: ${{secrets.GITHUB_TOKEN}}

